[{
    "category": {
        "html": {
            "one": {
                "question": " In HTML5, which tag or tags embed a webpage inside of a webpage?",
                "answers": {
                    "answer_1": "<iframe>, <frame>, and <frameset>",
                    "answer_2": "<frame>",
                    "answer_3": "<frame> and <frameset>",
                    "correct_answer": "<iframe>"
                }
            },
            "two": {
                "question": "Where do <header> and <footer> tags typically occur?",
                "answers": {
                    "answer_1": "as children of <body>, <article>, <aside>, and <section> tags",
                    "answer_2": "as children of <body>, <article>, <aside>, <nav>, and <section> tags",
                    "answer_3": "<body>, <article>, <table>, and <section> tags",
                    "correct_answer": "<body>, <article>, and <section> tags"
                }
            },
            "three": {
                "question": "What is the best way to apply bold styling to text?",
                "answers": {
                    "answer_1": "<strong>",
                    "answer_2": "<bold>",
                    "answer_3": "<b>",
                    "correct_answer": "Use CSS"
                }
            },
            "four": {
                "question": "When is the <link> tag used?",
                "answers": {
                    "answer_1": "when linking style sheets, JavaScript, and icons for mobile apps",
                    "answer_2": "when linking style sheets, favicons, and preloading assets",
                    "answer_3": "when linking one webpage to another",
                    "correct_answer": " when linking style sheets, external URLs, and favicons"
                }
            },
            "five": {
                "question": "The 'value' attribute is associated with which set of tags?",
                "answers": {
                    "answer_1": "<li><input><option>",
                    "answer_2": "<button><input><form>",
                    "answer_3": "<input><label><meter>",
                    "correct_answer": "<input><option><textarea>"
                }
            },
            "six": {
                "question": "When should you use the <aside> element?",
                "answers": {
                    "answer_1": "for anything in parentheses",
                    "answer_2": "for anything in a sidebar",
                    "answer_3": "when the content can be removed without detracting from the page's message",
                    "correct_answer": "for anything you want to move to the side, like a pull quote box, a sidebar, or an image with text wrapping around it"
                }
            },
            "seven": {
                "question": "With which tags is the <source> element associated?",
                "answers": {
                    "answer_1": "<svg>, <picture>, <audio>, and <video>",
                    "answer_2": "<picture>, <audio>, and <video>",
                    "answer_3": "It is interchangeable with the src attribute, so any element which uses src may use <source>",
                    "correct_answer": "<audio> and <video>"
                }
            },
            "eight": {
                "question": "What is NOT a valid attribute for the <textarea> element?",
                "answers": {
                    "answer_1": "readonly",
                    "answer_2": "form",
                    "answer_3": "spellcheck",
                    "correct_answer": " max"
                }
            },
            "nine": {
                "question": "When should you use <ol> and <ul> elements?",
                "answers": {
                    "answer_1": "Use <ol> when you have a list of items in which the order of the items matters. Use <ul> when you have a list of items that could go in any order.",
                    "answer_2": "Use <ol> when you want a bulleted list and <ul> when you want a numbered list.",
                    "answer_3": "Use <ul> when you have a list of items in which the order of the items matters. Use <ol> when you have a list of items that could go in any order.",
                    "correct_answer": "Use <ul> when you want a bulleted list and <ol> when you want a numbered list."
                }
            },
            "ten": {
                "question": "What is the difference between the <div> and <span> tags?",
                "answers": {
                    "answer_1": "<div> is used where a generic inline tag is needed, while <span> is used where a generic block-level tag is needed",
                    "answer_2": "<div> is the industry-standard default tag, but you could use <span> if you prefer.",
                    "answer_3": "<div> is used for major divisions on a page, while <span> is used to span across columns.",
                    "correct_answer": "<div> is used where a generic block-level tag is needed, while <span> is used where a generic inline tag is needed."
                }
            }
        },
        "css": {
            "one": {
                "question": "Using an attribute selector, how would you select an <a> element with a 'title' attribute?",
                "answers": {
                    "answer_1": "a > title {...}",
                    "answer_2": "a.title {...}",
                    "answer_3": "a=title {...}",
                    "correct_answer": "a[title]{...}"
                }
            },
            "two": {
                "question": "What is the line-height property primarily used for?",
                "answers": {
                    "answer_1": "to control the width of the space between characters",
                    "answer_2": "to control the height of the character size",
                    "answer_3": "to control the height of the space between heading elements",
                    "correct_answer": "to control the height of the space between two lines of content"
                }
            },
            "three": {
                "question": "Three of these choices are true about class selectors. Which is NOT true?",
                "answers": {
                    "answer_1": "Multiple classes can be used within the same element.",
                    "answer_2": "Class selectors with a leading period",
                    "answer_3": "The same class can be used multiple times per page.",
                    "correct_answer": "Classes can be used multiple times per page but not within the same element."
                }
            },
            "four": {
                "question": "To change the color of an SVG using CSS, which property is used?",
                "answers": {
                    "answer_1": "Use background-fill to set the color inside the object and stroke or border to set the color of the border.",
                    "answer_2": "The color cannot be changed with CSS.",
                    "answer_3": "Use fill or background to set the color inside the object and stroke to set the color of the border.",
                    "correct_answer": "Use fill to set the color inside the object and stroke to set the color of the border."
                }
            },
            "five": {
                "question": "When using position: fixed, what will the element always be positioned relative to?",
                "answers": {
                    "answer_1": "the closest element with position: relative",
                    "answer_2": "the parent element",
                    "answer_3": "the wrapper element",
                    "correct_answer": "the viewport"
                }
            },
            "six": {
                "question": "By default, a background image will repeat _",
                "answers": {
                    "answer_1": "only if the background-repeat property is set to repeat",
                    "answer_2": "indefinitely, vertically, and horizontally",
                    "answer_3": "indefinitely on the horizontal axis only",
                    "correct_answer": "once, on the x and y axis"
                }
            },
            "seven": {
                "question": "How would you make the first letter of every paragraph on the page red?",
                "answers": {
                    "answer_1": "first-letter:p { color: red; }",
                    "answer_2": "first-letter::p { color: red; }",
                    "answer_3": "p:first-letter { color: red; }",
                    "correct_answer": "p::first-letter { color: red; }"
                }
            }
        },
        "javascript": {
            "one": {
                "question": "Which operator returns true if the two compared values are not equal?",
                "answers": {
                    "answer_1": "<>",
                    "answer_2": "~",
                    "answer_3": "==!",
                    "correct_answer": "!=="
                }
            },
            "two": {
                "question": "How is a forEach statement different from a for statement?",
                "answers": {
                    "answer_1": "Only a for statement uses a callback function.",
                    "answer_2": "Only a forEach statement lets you specify your own iterator.",
                    "answer_3": "A forEach statement is generic, but a for statement can be used only with an array.",
                    "correct_answer": "A for statement is generic, but a forEach statement can be used only with an array."
                }
            },
            "three": {
                "question": "Which statement is the correct way to create a variable called rate and assign it the value 100?",
                "answers": {
                    "answer_1": "let 100 = rate;",
                    "answer_2": "100 = let rate;",
                    "answer_3": "rate = 100;",
                    "correct_answer": "let rate = 100;"
                }
            },
            "four": {
                "question": "Which statement creates a new object using the Person constructor? Which statement creates a new Person object called 'student'?",
                "answers": {
                    "answer_1": "var student = construct Person;",
                    "answer_2": "var student = Person();",
                    "answer_3": "var student = construct Person();",
                    "correct_answer": "var student = new Person();"
                }
            },
            "five": {
                "question": "How does a function create a closure?",
                "answers": {
                    "answer_1": "It reloads the document whenever the value changes.",
                    "answer_2": "It completes execution without returning.",
                    "answer_3": "It copies a local variable to the global scope.",
                    "correct_answer": "It returns a reference to a variable in its parent scope."
                }
            },
            "six": {
                "question": "What is the result of running this statement [console.log(typeof 42)]?",
                "answers": {
                    "answer_1": "integer",
                    "answer_2": "float",
                    "answer_3": "value",
                    "correct_answer": "number"
                }
            },
            "seven": {
                "question": "Which property references the DOM object that dispatched an event?",
                "answers": {
                    "answer_1": "self",
                    "answer_2": "object",
                    "answer_3": "source",
                    "correct_answer": "target"
                }
            },
            "eight": {
                "question": "When would you use a conditional statement?",
                "answers": {
                    "answer_1": "When you want to reuse a set of statements multiple times.",
                    "answer_2": "When you want to group data together.",
                    "answer_3": "When you want to loop through a group of statement.",
                    "correct_answer": "When you want your code to choose between multiple options"
                }
            },
            "nine": {
                "question": "Which Object method returns an iterable that can be used to iterate over the properties of an object?",
                "answers": {
                    "answer_1": "Object.each()",
                    "answer_2": "Object.loop()",
                    "answer_3": "Object.get()",
                    "correct_answer": "Object.keys()"
                }
            }
        },
        "react js": {
            "one": {
                "question": "If you want to import just the Component from the React library, what syntax do you use?",
                "answers": {
                    "answer_1": "import React.Component from 'react'",
                    "answer_2": "import [ Component ] from 'react'",
                    "answer_3": "import Component from 'react'",
                    "correct_answer": "import { Component } from 'react'"
                }
            },
            "two": {
                "question": "import React.Component from 'react'",
                "answers": {
                    "answer_1": "Mocha",
                    "answer_2": "Chai",
                    "answer_3": "Sinon",
                    "correct_answer": "Jest"
                }
            },
            "three": {
                "question": "How do you handle passing through the component tree without having to pass props down manually at every level?",
                "answers": {
                    "answer_1": "React Router",
                    "answer_2": "React Pinpoint",
                    "answer_3": "React Router",
                    "correct_answer": "React Context"
                }
            },
            "four": {
                "question": "Why might you use useReducer over useState in a React component?",
                "answers": {
                    "answer_1": "when you want to replace Redux",
                    "answer_2": "when you want to break your production app",
                    "answer_3": "when you want to improve performance",
                    "correct_answer": "when you need to manage more complex state in an app"
                }
            },
            "five": {
                "question": "What can you use to handle code splitting?",
                "answers": {
                    "answer_1": "React.memo",
                    "answer_2": "React.split",
                    "answer_3": "React.fallback",
                    "correct_answer": "React.lazy"
                }
            },
            "six": {
                "question": "What is the children prop?",
                "answers": {
                    "answer_1": "a property that lets you set an array as a property",
                    "answer_2": "a property that lets you pass components as data to other components",
                    "answer_3": "a property that adds child components to state",
                    "correct_answer": "a property that lets you pass data to child elements"
                }
            },
            "seven": {
                "question": "Which attribute do you use to replace innerHTML in the browser DOM?",
                "answers": {
                    "answer_1": "injectHTML",
                    "answer_2": "weirdSetInnerHTML",
                    "answer_3": "strangeHTML",
                    "correct_answer": "dangerouslySetInnerHTML"
                }
            }
        },
        "front-end": {
            "one": {
                "question": "Variables declared with the let keyword have what type of scope?",
                "answers": {
                    "answer_1": "function scope",
                    "answer_2": "inline scope",
                    "answer_3": "global scope",
                    "correct_answer": "block scope"
                }
            },
            "two": {
                "question": "Which attribute must have a unique value each time it is used in an HTML document?",
                "answers": {
                    "answer_1": "title",
                    "answer_2": "class",
                    "answer_3": "style",
                    "correct_answer": "id"
                }
            },
            "three": {
                "question": "Which CSS property will not trigger layout recalculation?",
                "answers": {
                    "answer_1": "top",
                    "answer_2": "width",
                    "answer_3": "height",
                    "correct_answer": "opacity"
                }
            },
            "four": {
                "question": "What does the === comparison operator do?",
                "answers": {
                    "answer_1": "It sets one variable equal to another in both value and type",
                    "answer_2": "It tests for equality of type only",
                    "answer_3": "It tests for equality of value only",
                    "correct_answer": "It tests for equality of value and type"
                }
            },
            "five": {
                "question": "What is the <label> element used for?",
                "answers": {
                    "answer_1": "to identify the difference parts of a figure",
                    "answer_2": "as a caption for images",
                    "answer_3": "as a heading for tables",
                    "correct_answer": "to explain what needs to be entered into a form field"
                }
            },
            "six": {
                "question": "The browser finds some CSS that it does not understand. What is likely happen?",
                "answers": {
                    "answer_1": "The page will not display",
                    "answer_2": "An error message will be displayed",
                    "answer_3": "The browser will not load the stylesheet",
                    "correct_answer": "The browser will ignore the unknown CSS"
                }
            },
            "seven": {
                "question": "Which choice is not a value of the type attribute of the <input> element?",
                "answers": {
                    "answer_1": "range",
                    "answer_2": "date",
                    "answer_3": "password",
                    "correct_answer": "address"
                }
            },
            "eight": {
                "question": "Which part of the URL https://app.uniswap.org/pool specifies the domain name",
                "answers": {
                    "answer_1": "https",
                    "answer_2": "org",
                    "answer_3": "uniswap.org",
                    "correct_answer": "app.uniswap"
                }
            }
        },
        "git": {
            "one": {
                "question": "How can you check your current git version?",
                "answers": {
                    "answer_1": "git --v",
                    "answer_2": "git --current",
                    "answer_3": "git --option",
                    "correct_answer": "git --version"
                }
            },
            "two": {
                "question": "What command lets you create a connection between a local and remote repository?",
                "answers": {
                    "answer_1": "git remote add new",
                    "answer_2": "git remote new origin",
                    "answer_3": "git remote origin",
                    "correct_answer": "git remote add origin"
                }
            },
            "three": {
                "question": "What option can you use to apply git configurations across your entire git environment?",
                "answers": {
                    "answer_1": "--master",
                    "answer_2": "--all",
                    "answer_3": "--master",
                    "correct_answer": "--global"
                }
            },
            "four": {
                "question": "Where are files stored before they are committed to the local repository?",
                "answers": {
                    "answer_1": "Saved files",
                    "answer_2": "git documents",
                    "answer_3": "git cache",
                    "correct_answer": "Staging area"
                }
            },
            "six": {
                "question": "What command would let you modify your previous commit?",
                "answers": {
                    "answer_1": "--modify",
                    "answer_2": "--quickfix",
                    "answer_3": "--fix",
                    "correct_answer": "--amend"
                }
            }
        }
    }
}]